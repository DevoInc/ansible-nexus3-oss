---
- name: Ensure Nexus o/s group exists
  group:
    name: "{{ nexus_os_group }}"
    gid: 200
    state: present

- name: Ensure Nexus o/s user exists
  user:
    name: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    uid: 200
    shell: "/bin/bash"
    state: present

- name: create environment file for docker
  copy:
    dest: "{{ nexus_data_dir }}/etc/nexus_docker.env"
    content: |
      export INSTALL4J_ADD_VM_PARAMS="
        -Xms{{ nexus_xms }} 
        -Xmx{{ nexus_xmx }} 
        -XX:MaxDirectMemorySize={{ nexus_MaxDirectMemorySize }} 
        -XX:+UnlockDiagnosticVMOptions 
        -XX:+UnsyncloadClass 
        -XX:+LogVMOutput 
        -XX:LogFile=/nexus-data/log/jvm.log 
        -XX:-OmitStackTraceInFastThrow 
        -Djava.net.preferIPv4Stack=true 
        -Dkaraf.home=/nexus-data 
        -Dkaraf.base=/nexus-data 
        -Dkaraf.etc=/nexus-data/etc/karaf 
        -Djava.util.logging.config.file=/nexus-data/etc/karaf/java.util.logging.properties 
        -Dkaraf.data=/nexus-data  
        -Djava.io.tmpdir=/nexus-data/tmp/ 
        -Dkaraf.startLocalConsole=false 
        -Duser.timezone=UTC"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    mode: "0755"

- name: create Nexus start script
  copy:
    dest: /etc/systemd/system/docker.nexus.service
    content: |
        [Unit]
        Description=Docker Nexus Container
        After=docker.service
        Requires=docker.service

        [Service]
        ExecStartPre=-/usr/bin/docker stop %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull {{nexus_docker_image_name}}:{{nexus_docker_image_version}}
        ExecStart=/usr/bin/docker run --init --name %n --env-file={{ nexus_data_dir }}/etc/nexus_docker.env -v {{ nexus_data_dir }}:/nexus-data --publish={{nexus_docker_http_port}}:8081 {{nexus_docker_run_options}} {{nexus_docker_image_name}}:{{nexus_docker_image_version}}
        ExecStop=/usr/bin/docker stop %n
        TimeoutStartSec=0
        Restart=always

        [Install]
        WantedBy=multi-user.target
    backup: false
    owner: root
    group: root
    mode: 0755
  notify:
    - systemd-reload
    - docker-nexus-service-restart
  tags:
    - nexus

- name: Get application settings directories
  set_fact:
    nexus_app_dir_settings_dirs:
      - "{{ nexus_data_dir }}/etc"
  when: nexus_docker_image_version is version_compare('3.1.0', '<') and nexus_docker_image_version != "latest"

- name: Get application settings directories
  set_fact:
    nexus_app_dir_settings_dirs:
      - "{{ nexus_data_dir }}/etc/karaf"
      - "{{ nexus_data_dir }}/etc"
      - "{{ nexus_data_dir }}/etc/jetty"
      - "{{ nexus_data_dir }}/etc/fabric"
      - "{{ nexus_data_dir }}/etc/logback"
      - "{{ nexus_data_dir }}/etc/scripts"
  when: nexus_docker_image_version is version_compare('3.1.0', '>=') or nexus_docker_image_version == "latest"

- name: Get rest API endpoint (v < 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/siesta/rest/v1/script"
  when: nexunexus_docker_image_versions_version is version_compare('3.8.0', '<') and nexus_docker_image_version != "latest"

- name: Get rest API endpoint (v >= 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/rest/v1/script"
  when: nexus_docker_image_version is version_compare('3.8.0', '>=') or nexus_docker_image_version == "latest"

- name: Get path to database restore dir (v < 3.11.0)
  set_fact:
    nexus_db_restore_dir: "{{ nexus_data_dir }}/backup"
  when: nexus_docker_image_version is version_compare('3.11.0', '<') and nexus_docker_image_version != "latest"

- name: Get path to database restore dir (v >= 3.11.0)
  set_fact:
    nexus_db_restore_dir: "{{ nexus_data_dir }}/restore-from-backup"
  when: nexus_docker_image_version is version_compare('3.11.0', '>=') or nexus_docker_image_version == "latest"

- name: 

- name: Allow nexus to create first-time install configuration files in  {{ nexus_data_dir }}/etc
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    mode: "0755"
    recurse: false
  with_items: "{{ nexus_app_dir_settings_dirs }}"
  tags:
    # hard to run as a handler for time being
    - skip_ansible_lint

- name: Create Nexus data directory
  file:
    path: "{{ nexus_data_dir }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"

- name: Create Nexus tmp/backup/javaprefs directory
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
  with_items:
    - "{{ nexus_docker_tmp_dir }}"
    - "{{ nexus_docker_backup_dir }}"
    - "{{ nexus_data_dir }}/javaprefs"

- block:
    - name: "Deploy backup restore script"
      template:
        src: "nexus-blob-restore.sh.j2"
        dest: "{{ nexus_docker_script_dir }}/nexus-blob-restore.sh"
        mode: 0755
    - name: "Symlink backup restore script to /sbin"
      file:
        src: "{{ nexus_docker_script_dir }}/nexus-blob-restore.sh"
        dest: "/sbin/nexus-blob-restore.sh"
        state: link
  when: nexus_backup_configure | bool

- name: 'Check if data directory is empty (first-time install)'
  find:
    paths: "{{ nexus_data_dir }}/db"
  register: nexus_data_dir_contents
  check_mode: no
  changed_when: false

- name: Install docker
  become: true
  package:
    name: "docker.io"

- meta: flush_handlers

- name: Enable nexus service and make sure it is started
  systemd:
    name: docker.nexus.service
    enabled: yes
    state: started
  notify:
    - wait-for-nexus
    - wait-for-nexus-port

- meta: flush_handlers

- name: First-time install admin password
  set_fact:
    current_nexus_admin_password: 'admin123'
  when: not nexus_data_dir_contents.matched

- name: Subsequent re-provision admin password
  set_fact:
    current_nexus_admin_password: "{{ nexus_admin_password }}"
  when: nexus_data_dir_contents.matched
  no_log: true

- name: Create directory to hold current groovy scripts for reference
  file:
    path: "{{ nexus_data_dir }}/groovy-raw-scripts/current"
    state: directory
    owner: root
    group: root

- name: Upload new scripts
  synchronize:
    archive: no
    checksum: yes
    recursive: yes
    delete: yes
    mode: push
    use_ssh_args: yes
    src: "files/groovy/"
    dest: "{{ nexus_data_dir }}/groovy-raw-scripts/new/"

- name: Sync new scripts to old and get differences
  shell: 'rsync -ric {{ nexus_data_dir }}/groovy-raw-scripts/new/ {{ nexus_data_dir }}/groovy-raw-scripts/current/ | cut -d" " -f 2 | sed "s/\.groovy//g"'
  register: nexus_groovy_files_changed
  check_mode: no
  changed_when: false
  # simple check on changed files kept on host
  # skip ansible lint (we don't want to use synchronize module for this)
  args:
    warn: false

- name: Declare new or changed groovy scripts in nexus
  include: declare_script_each.yml
  with_items: "{{ nexus_groovy_files_changed.stdout_lines}}"